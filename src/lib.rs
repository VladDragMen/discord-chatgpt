use discord_flows::{model::Message, Bot, ProvidedBot, message_handler};
use flowsnet_platform_sdk::logger;
use openai_flows::{chat::{ChatModel, ChatOptions}, OpenAIFlows};
use serde_json::{json, Value};
use std::{collections::HashMap, env, sync::Mutex};
use lazy_static::lazy_static;

lazy_static! {
    static ref PREFIXES: Mutex<HashMap<String, String>> = Mutex::new(HashMap::from([
        ("585734874699399188".to_string(), "–•–æ–∑—è–∏–Ω".to_string()),
        ("524913624117149717".to_string(), "–ö–∏—Å–∏–∫".to_string()),
    ]));
}

const EMBED_COLOR: i32 = 3447003;
const DEFAULT_DESCRIPTION: &str = "*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...*";
const SYSTEM_PROMPT: &str = "–í—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ Discord.";
const DISCORD_INVITE_LINK: &str = "https://discord.gg/vladvd91";

fn create_embed(description: &str, title: Option<&str>, fields: Option<Vec<Value>>) -> Value {
    json!({
        "embeds": [{
            "author": {
                "name": "–û—Ç–≤–µ—Ç –æ—Ç –£–º–Ω–æ–≥–æ –õ–∏—Å—ë–Ω–∫–∞ ü¶ä",
                "icon_url": "https://i.imgur.com/emgIscZ.png"
            },
            "title": title.unwrap_or_default(),
            "description": description,
            "color": EMBED_COLOR,
            "fields": fields.unwrap_or_default(),
            "footer": {
                "text": format!("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º! üåü {}", DISCORD_INVITE_LINK)
            }
        }]
    })
}

#[tokio::main(flavor = "current_thread")]
async fn main() {
    let token = env::var("discord_token").expect("Expected a token in the environment");
    let bot = ProvidedBot::new(token);
    bot.listen_to_messages(handler).await;
}

#[message_handler]
async fn handler(msg: Message) {
    logger::init();
    
    if msg.author.bot {
        log::info!("ignored bot message");
        return;
    }
    
    if !msg.content.starts_with("!") {
        return;
    }
    
    let discord = ProvidedBot::new(env::var("discord_token").unwrap()).get_client();
    let channel_id = msg.channel_id;
    
match msg.content.to_lowercase().as_str() {
        "!—Ä–µ—Å—Ç–∞—Ä—Ç" => handle_restart(&discord, &channel_id).await,
        "!–ø—Ä–µ—Ñ–∏–∫—Å—ã" => show_prefixes(&discord, &channel_id).await,
        "!–∫–æ–º–∞–Ω–¥—ã" => show_commands(&discord, &channel_id).await,
        _ => log::info!("Unknown command: {}", msg.content),
    }
}

async fn handle_restart(discord: &Bot, channel_id: &str) {
    // Example implementation. Adapt based on actual logic.
    let embed_message = create_embed("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–µ—Å–µ–¥—ã.", None, None);
    let _ = discord.send_message(channel_id.into(), &embed_message).await;
}

async fn show_prefixes(discord: &Bot, channel_id: &str) {
    let prefixes = PREFIXES.lock().unwrap();
    let response = prefixes.iter().map(|(id, prefix)| format!("{}: {}", id, prefix)).collect::<Vec<_>>().join("\n");
    let embed_message = create_embed(&response, Some("–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"), None);
    let _ = discord.send_message(channel_id.into(), &embed_message).await;
}

async fn show_commands(discord: &Bot, channel_id: &str) {
    let commands_description = create_embed(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        Some("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
        Some(vec![
            json!({"name": "!–ø—Ä–µ—Ñ–∏–∫—Å—ã", "value": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.", "inline": false}),
            json!({"name": "!—Ä–µ—Å—Ç–∞—Ä—Ç", "value": "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–∞—á–∏–Ω–∞—è –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", "inline": false}),
        ])
    );
    let _ = discord.send_message(channel_id.into(), &commands_description).await;
}

match msg.content.to_lowercase().as_str() {
    "!—Ä–µ—Å—Ç–∞—Ä—Ç" => handle_restart(&discord, &channel_id).await,
    "!–ø—Ä–µ—Ñ–∏–∫—Å—ã" => show_prefixes(&discord, &channel_id).await,
    "!–∫–æ–º–∞–Ω–¥—ã" => show_commands(&discord, &channel_id).await,
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI
    _ => handle_openai_response(&discord, &msg).await,
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é `handle_openai_response`
async fn handle_openai_response(discord: &Bot, msg: &Message) {
    let channel_id = msg.channel_id.to_string();
    let content = &msg.content;
    
    let placeholder = discord.send_message(
        &channel_id,
        &serde_json::json!({"content": DEFAULT_DESCRIPTION}),
    ).await.expect("Failed to send placeholder message");

    let mut openai = OpenAIFlows::new(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
    openai.set_retry_times(3);

    let co = ChatOptions {
        model: ChatModel::GPT35Turbo, // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞
        restart: false,
        system_prompt: Some(SYSTEM_PROMPT),
        ..Default::default()
    };

    let response_prefix = PREFIXES.lock().unwrap().get(&msg.author.id.to_string()).unwrap_or(&"".to_string()).to_string();

    match openai.chat_completion(&channel_id, content, &co).await {
        Ok(r) => {
            let response = format!("{}{}", response_prefix, r.choice);
            let embed_message = create_embed(&format!("```{}\n```", response), None, None);
            let _ = discord.edit_message(&channel_id, &placeholder.id.into(), &embed_message).await;
        }
        Err(e) => {
            let error_message = create_embed("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None, None);
            let _ = discord.edit_message(&channel_id, &placeholder.id.into(), &error_message).await;
            log::error!("OpenAI returns error: {}", e);
        }
    }
}
