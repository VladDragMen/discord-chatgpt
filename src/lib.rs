use std::env;
use std::collections::HashMap;
use std::sync::Mutex;
use lazy_static::lazy_static;
use std::time::{Duration, Instant};
use discord_flows::{model::Message, Bot, ProvidedBot, message_handler};
use flowsnet_platform_sdk::logger;
use openai_flows::{chat::{ChatModel, ChatOptions}, OpenAIFlows};
use store_flows as store;
use serde_json::json;

lazy_static! {
    static ref PREFIXES: Mutex<HashMap<String, String>> = Mutex::new({
        let mut m = HashMap::new();
        m.insert("585734874699399188".to_string(), "–•–æ–∑—è–∏–Ω".to_string());
        m.insert("524913624117149717".to_string(), "–ö–∏—Å–∏–∫".to_string());
        m
    });
}

fn create_embed(description: &str, title: Option<&str>, fields: Option<Vec<serde_json::Value>>) -> serde_json::Value {
    json!({
        "embeds": [{
            "author": {
                "name": "–û—Ç–≤–µ—Ç –æ—Ç –£–º–Ω–æ–≥–æ –õ–∏—Å—ë–Ω–∫–∞ ü¶ä",
                "icon_url": "https://i.imgur.com/emgIscZ.png"
            },
            "title": title.unwrap_or_default(),
            "description": description,
            "color": 3447003,
            "fields": fields.unwrap_or_else(Vec::new),
            "footer": {
                "text": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º! üåü https://discord.gg/vladvd91"
            }
        }]
    })
}

#[tokio::main(flavor = "current_thread")]
async fn main() {
    logger::init(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑
    let token = env::var("discord_token").expect("Expected a token in the environment");
    let bot = ProvidedBot::new(token);
    bot.listen_to_messages().await;
}

#[message_handler]
async fn handler(msg: Message) {
    if msg.author.bot {
        return;
    }

    let discord = ProvidedBot::new(env::var("discord_token").unwrap()).get_client();
    let content = msg.content.trim();

    if !content.starts_with("!") {
        return;
    }

    match content.to_lowercase().as_str() {
        "!—Ä–µ—Å—Ç–∞—Ä—Ç" => handle_restart(&discord, &msg).await,
        "!–ø—Ä–µ—Ñ–∏–∫—Å—ã" => show_prefixes(&discord, &msg).await,
        "!—Ñ—É—Ä—Ä–∏" => handle_furry(&discord, &msg).await,
        "!–æ–±–Ω—è—Ç—å" => handle_hug(&discord, &msg, content).await,
        "!–∫–æ–º–∞–Ω–¥—ã" => show_commands(&discord, &msg).await,
        _ => return,
    }
}

async fn handle_restart(discord: &ProvidedBotClient, msg: &Message) {
    let embed_message = create_embed("–•–æ—Ä–æ—à–æ, —è –Ω–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.", None, None);
    discord.send_message(msg.channel_id.into(), &embed_message).await.unwrap();
    store::set(&msg.channel_id.to_string(), json!(true), None).unwrap();
}

async fn show_prefixes(discord: &ProvidedBotClient, msg: &Message) {
    let prefixes = PREFIXES.lock().unwrap();
    let response = prefixes.iter()
        .map(|(id, prefix)| format!("{}: @{}", prefix, id))
        .collect::<Vec<_>>()
        .join("\n");

    let embed_message = create_embed(&response, Some("–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"), None);
    discord.send_message(msg.channel_id.into(), &embed_message).await.unwrap();
}

async fn handle_furry(discord: &ProvidedBotClient, msg: &Message) {
    let furry_percentage: i32 = rand::thread_rng().gen_range(50..=100);
    let response = format!("–¢—ã —Ñ—É—Ä—Ä–∏ –Ω–∞ {}%", furry_percentage);
    let embed_message = create_embed(&response, None, None);
    discord.send_message(msg.channel_id.into(), &embed_message).await.unwrap();
}

async fn handle_hug(discord: &ProvidedBotClient, msg: &Message, content: &str) {
    let target = content.strip_prefix("!–æ–±–Ω—è—Ç—å").unwrap_or("").trim();
    let response = if !target.is_empty() {
        format!("{} –æ–±–Ω—è–ª –º–∏–ª–∞—à–∫—É {}.", msg.author.name, target)
    } else {
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–Ω–∏–º–∞—à–µ–∫! –ü—Ä–∏–º–µ—Ä: !–æ–±–Ω—è—Ç—å @username".to_string()
    };
    let embed_message = create_embed(&response, None, None);
    discord.send_message(msg.channel_id.into(), &embed_message).await.unwrap();
}

async fn show_commands(discord: &ProvidedBotClient, msg: &Message) {
    let commands_description = create_embed(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        Some("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
        Some(vec![
            json!({"name": "!–ø—Ä–µ—Ñ–∏–∫—Å—ã", "value": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.", "inline": false}),
            json!({"name": "!—Ä–µ—Å—Ç–∞—Ä—Ç", "value": "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–∞—á–∏–Ω–∞—è –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.", "inline": false}),
            json!({"name": "–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º", "value": "–ß—Ç–æ–±—ã –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–Ω–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å \"!\". –ü—Ä–∏–º–µ—Ä: !–∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –≤–æ–¥—É.", "inline": false}),
        ]),
    );
    discord.send_message(msg.channel_id.into(), &commands_description).await.unwrap();
}

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    let restart = store::get(&channel_id.to_string())
        .and_then(|v| v.as_bool())
        .unwrap_or(false);
    if restart {
        log::info!("Detected restart = true");
        store::set(&channel_id.to_string(), json!(false), None);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
    let placeholder = discord.send_message(
        channel_id.into(),
        &serde_json::json!({
            "content": &placeholder_text
        }),
    ).await.unwrap();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è —á–∞—Ç–∞
    let mut openai = OpenAIFlows::new();
    openai.set_retry_times(3);
    let co = ChatOptions {
       // model: ChatModel::GPT4,
        model: ChatModel::GPT35Turbo, // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞
        restart: restart,
        system_prompt: Some(&system_prompt),
        ..Default::default()
    };

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let response_prefix = match msg.author.id.to_string().as_str() {
        "585734874699399188" => "–•–æ–∑—è–∏–Ω, ",
        "524913624117149717" => "–ö–∏—Å–∏–∫, ",
        _ => ""
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
            match openai.chat_completion(&channel_id.to_string(), &content, &co).await {
    Ok(r) => {
        let response = format!("{}{}", response_prefix, r.choice);
        let embed_message = create_embed(&format!("```elixir\n{}\n```", response), None, None);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        let _ = discord.send_message(channel_id.into(), &embed_message).await;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if let Err(err) = discord.delete_message(channel_id.into(), placeholder.id.into()).await {
            log::error!("Failed to delete placeholder message: {}", err);
        }
    }
    Err(e) => {
        let error_message = create_embed("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None, None);

        // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
        let _ = discord.send_message(channel_id.into(), &error_message).await;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if let Err(err) = discord.delete_message(channel_id.into(), placeholder.id.into()).await {
            log::error!("Failed to delete placeholder message: {}", err);
        }

        log::error!("OpenAI returns error: {}", e);
    }
}
}
