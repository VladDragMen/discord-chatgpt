use std::env;
use discord_flows::{model::Message, Bot, ProvidedBot, message_handler};
use flowsnet_platform_sdk::logger;
use openai_flows::{
    chat::{ChatModel, ChatOptions},
    OpenAIFlows,
};
use store_flows as store;
use serde_json::json;

use std::collections::HashMap;
use std::sync::Mutex;
use lazy_static::lazy_static;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Mutex –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
lazy_static! {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Mutex –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π —Å—Ä–µ–¥–µ
    static ref PREFIXES: Mutex<HashMap<String, String>> = Mutex::new({
        let mut m = HashMap::new();
        m.insert("585734874699399188".to_string(), "–•–æ–∑—è–∏–Ω".to_string());
        m.insert("524913624117149717".to_string(), "–ö–∏—Å–∏–∫".to_string());
        m
    });
}

fn create_embed(description: &str, title: Option<&str>, fields: Option<Vec<serde_json::Value>>) -> serde_json::Value {
    serde_json::json!({
        "embeds": [{
            "author": {
                "name": "–û—Ç–≤–µ—Ç –æ—Ç –£–º–Ω–æ–≥–æ –õ–∏—Å—ë–Ω–∫–∞ ü¶ä",
                "icon_url": "https://i.imgur.com/emgIscZ.png"
            },
            "title": title.unwrap_or(""),
            "description": description,
            "color": 3447003,
            "fields": fields.unwrap_or_else(Vec::new),
            "footer": {
                "text": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º! üåü https://discord.gg/vladvd91"
            }
        }]
    })
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
#[no_mangle]
#[tokio::main(flavor = "current_thread")]
pub async fn on_deploy() {
    let token = std::env::var("discord_token").unwrap();
    let bot = ProvidedBot::new(token);
    bot.listen_to_messages().await;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
#[message_handler]
async fn handler(msg: Message) {
    logger::init();// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    let token = env::var("discord_token").unwrap();
    
     // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    let placeholder_text = env::var("placeholder").unwrap_or("*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...*".to_string());
    let system_prompt = env::var("system_prompt").unwrap_or("–í—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ Discord.".to_string());

    let bot = ProvidedBot::new(token);
    let discord = bot.get_client();
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
    if msg.author.bot {
        log::info!("ignored bot message");
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    let user_id = msg.author.id; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let channel_id = msg.channel_id; // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞
    let content = msg.content; // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è

     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "!"
    if !content.starts_with("!") {
        return; // –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    if content.eq_ignore_ascii_case("!—Ä–µ—Å—Ç–∞—Ä—Ç") {
    let embed_message = create_embed("–•–æ—Ä–æ—à–æ, —è –Ω–∞—á–∏–Ω–∞—é –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.", None, None);
    _ = discord.send_message(channel_id.into(), &embed_message).await;
    store::set(&channel_id.to_string(), json!(true), None);
    log::info!("Restarted conversation for {}", channel_id);
    return;
}
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
    if content.eq_ignore_ascii_case("!–ø—Ä–µ—Ñ–∏–∫—Å—ã") {
    let prefixes = PREFIXES.lock().unwrap();
    let mut response = String::new();

    for (id, prefix) in prefixes.iter() {
        let user_name = match id.as_str() {
            "585734874699399188" => "@vladvd91",
            "524913624117149717" => "@boykising",
            _ => "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
        };
        response.push_str(&format!("{}: {}\n", prefix, user_name));
    }

    let embed_message = create_embed(&response, Some("–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤"), None);
    _ = discord.send_message(channel_id.into(), &embed_message).await;
    return;
}

    if content.eq_ignore_ascii_case("!–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å") {
    let member = discord.get_member(guild_id, user_id).await.unwrap();
    let user_name = member.user.name;
    let joined_at = member.joined_at.unwrap();
    let roles = member.roles.iter().map(|role_id| {
        discord.get_role(guild_id, *role_id).await.unwrap().name
    }).collect::<Vec<String>>().join(", ");
    
    let embed_message = create_embed(
        &format!("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n–ù–∏–∫: {}\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {}\n–†–æ–ª–∏: {}", user_name, joined_at, roles),
        Some("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
        None
    );
    
    _ = discord.send_message(channel_id.into(), &embed_message).await;
}
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    if content.eq_ignore_ascii_case("!–∫–æ–º–∞–Ω–¥—ã") {
    let commands_description = create_embed(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:",
        Some("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"),
        Some(vec![
            serde_json::json!({
                "name": "!–ø—Ä–µ—Ñ–∏–∫—Å—ã",
                "value": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤.",
                "inline": false
            }),
            serde_json::json!({
                "name": "!—Ä–µ—Å—Ç–∞—Ä—Ç",
                "value": "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–∞—á–∏–Ω–∞—è –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
                "inline": false
            }),
        ])
    );

    _ = discord.send_message(channel_id.into(), &commands_description).await;
    return;
}
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    let restart = store::get(&channel_id.to_string())
        .and_then(|v| v.as_bool())
        .unwrap_or(false);
    if restart {
        log::info!("Detected restart = true");
        store::set(&channel_id.to_string(), json!(false), None);
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è-–∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
    let placeholder  = discord.send_message(
        channel_id.into(),
        &serde_json::json!({
            "content": &placeholder_text
        }),
    ).await.unwrap();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ü–∏–π –¥–ª—è —á–∞—Ç–∞
    let mut openai = OpenAIFlows::new();
    openai.set_retry_times(3);
    let co = ChatOptions {
        // model: ChatModel::GPT4,
        model: ChatModel::GPT35Turbo, // –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–∞—Ç–∞
        restart: restart,
        system_prompt: Some(&system_prompt),
        ..Default::default()
    };

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   let response_prefix = match msg.author.id.to_string().as_str() {
        "585734874699399188" => "–•–æ–∑—è–∏–Ω, ",
        "524913624117149717" => "–ö–∏—Å–∏–∫, ",
        _ => ""
    };
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI
    match openai.chat_completion(&channel_id.to_string(), &content, &co).await {
    Ok(r) => {
        let response = format!("{}{}", response_prefix, r.choice);
        let embed_message = create_embed(&format!("```elixir\n{}\n```", response), None, None);
        _ = discord.edit_message(
            channel_id.into(), placeholder.id.into(), &embed_message
        ).await;
    }
    Err(e) => {
        let error_message = create_embed("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None, None);
        _ = discord.edit_message(
            channel_id.into(), placeholder.id.into(), &error_message
        ).await;
        log::error!("OpenAI returns error: {}", e);
    }
}

}
